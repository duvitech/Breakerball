# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_i2clcd', [dirname(__file__)])
        except ImportError:
            import _pyupm_i2clcd
            return _pyupm_i2clcd
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_i2clcd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_i2clcd = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_i2clcd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyupm_i2clcd.new_uint8Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_uint8Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyupm_i2clcd.uint8Array___getitem__(self, *args)
    def __setitem__(self, *args): return _pyupm_i2clcd.uint8Array___setitem__(self, *args)
    def cast(self): return _pyupm_i2clcd.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_i2clcd.uint8Array_frompointer
    if _newclass:frompointer = staticmethod(_pyupm_i2clcd.uint8Array_frompointer)
uint8Array_swigregister = _pyupm_i2clcd.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(*args):
  return _pyupm_i2clcd.uint8Array_frompointer(*args)
uint8Array_frompointer = _pyupm_i2clcd.uint8Array_frompointer

HORIZONTAL = _pyupm_i2clcd.HORIZONTAL
VERTICAL = _pyupm_i2clcd.VERTICAL
PAGE = _pyupm_i2clcd.PAGE
class LCD(_object):
    """Proxy of C++ upm::LCD class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LCD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LCD, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyupm_i2clcd.delete_LCD
    __del__ = lambda self : None;
    def write(self, *args):
        """
        write(LCD self, int x, int y, std::string msg) -> mraa::Result

        Parameters:
            x: int
            y: int
            msg: std::string

        write(LCD self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        virtual mraa::Result
        write(std::string msg)=0 
        """
        return _pyupm_i2clcd.LCD_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(LCD self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        virtual mraa::Result
        setCursor(int row, int column)=0 
        """
        return _pyupm_i2clcd.LCD_setCursor(self, *args)

    def clear(self):
        """
        clear(LCD self) -> mraa::Result

        Parameters:
            self: upm::LCD *


        virtual mraa::Result
        clear()=0 
        """
        return _pyupm_i2clcd.LCD_clear(self)

    def home(self):
        """
        home(LCD self) -> mraa::Result

        Parameters:
            self: upm::LCD *


        virtual mraa::Result home()=0

        """
        return _pyupm_i2clcd.LCD_home(self)

    def name(self):
        """
        name(LCD self) -> std::string

        Parameters:
            self: upm::LCD *


        std::string name() 
        """
        return _pyupm_i2clcd.LCD_name(self)

LCD_swigregister = _pyupm_i2clcd.LCD_swigregister
LCD_swigregister(LCD)
cvar = _pyupm_i2clcd.cvar
DISPLAY_CMD_OFF = cvar.DISPLAY_CMD_OFF
DISPLAY_CMD_ON = cvar.DISPLAY_CMD_ON
BASE_LOW_COLUMN_ADDR = cvar.BASE_LOW_COLUMN_ADDR
BASE_HIGH_COLUMN_ADDR = cvar.BASE_HIGH_COLUMN_ADDR
BASE_PAGE_START_ADDR = cvar.BASE_PAGE_START_ADDR
DISPLAY_CMD_MEM_ADDR_MODE = cvar.DISPLAY_CMD_MEM_ADDR_MODE
BasicFont = cvar.BasicFont

class Lcm1602(LCD):
    """
    API for the LCM1602 I2C controller for HD44780-based displays.

    ID: lcm1602

    Name: LCM1602 Display

    Category: display

    Manufacturer: adafruit sparkfun seeed

    Link:https://www.adafruit.com/datasheets/TC1602A-01T.pdf

    Connection: i2c gpio  This supports all sizes of HD44780 displays,
    from 16x2 to 4x20. The controller has no idea of the actual display
    hardware, so it lets you write farther than you can see. These
    displays with such controllers are available from various
    manufacturers with different I2C addresses. Adafruit* TC1602A-01T
    seems to be a well-documented example. The driver also supports
    parallel GPIO connections directly to the HD44780 in case you are not
    using an I2C expander/backpack.

    Example for LCM1602 displays that use the I2C busCode sample for GPIO
    based LCM1602 displays

    C++ includes: lcm1602.h 
    """
    __swig_setmethods__ = {}
    for _s in [LCD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lcm1602, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lcm1602, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Lcm1602 self, int bus, int address, bool isExpander=True, uint8_t numColumns=16, uint8_t numRows=4) -> Lcm1602

        Parameters:
            bus: int
            address: int
            isExpander: bool
            numColumns: uint8_t
            numRows: uint8_t

        __init__(upm::Lcm1602 self, int bus, int address, bool isExpander=True, uint8_t numColumns=16) -> Lcm1602

        Parameters:
            bus: int
            address: int
            isExpander: bool
            numColumns: uint8_t

        __init__(upm::Lcm1602 self, int bus, int address, bool isExpander=True) -> Lcm1602

        Parameters:
            bus: int
            address: int
            isExpander: bool

        __init__(upm::Lcm1602 self, int bus, int address) -> Lcm1602

        Parameters:
            bus: int
            address: int

        __init__(upm::Lcm1602 self, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t numColumns=16, 
            uint8_t numRows=4) -> Lcm1602

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t
            numColumns: uint8_t
            numRows: uint8_t

        __init__(upm::Lcm1602 self, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t numColumns=16) -> Lcm1602

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t
            numColumns: uint8_t

        __init__(upm::Lcm1602 self, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) -> Lcm1602

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t


        Lcm1602(uint8_t rs,
        uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
        uint8_t numColumns=16, uint8_t numRows=4)

        Lcm1602 alternate constructor, used for GPIO based HD44780 controllers
        supporting RS, Enable, and 4 data pins in 4-bit mode.

        Parameters:
        -----------

        rs:  Register select pin

        enable:  Enable pin

        d0:  Data 0 pin

        d1:  Data 1 pin

        d2:  Data 2 pin

        d3:  Data 3 pin 
        """
        this = _pyupm_i2clcd.new_Lcm1602(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Lcm1602
    __del__ = lambda self : None;
    def write(self, *args):
        """
        write(Lcm1602 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        mraa::Result
        write(std::string msg)

        Writes a string to the LCD

        Parameters:
        -----------

        msg:  std::string to write to the display; note: only ASCII characters
        are supported

        Result of the operation 
        """
        return _pyupm_i2clcd.Lcm1602_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(Lcm1602 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        mraa::Result
        setCursor(int row, int column)

        Sets the cursor to specified coordinates

        Parameters:
        -----------

        row:  Row to set the cursor to

        column:  Column to set the cursor to

        Result of the operation 
        """
        return _pyupm_i2clcd.Lcm1602_setCursor(self, *args)

    def clear(self):
        """
        clear(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result clear()

        Clears the display of all characters

        Result of the operation 
        """
        return _pyupm_i2clcd.Lcm1602_clear(self)

    def home(self):
        """
        home(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result home()

        Returns to the original coordinates (0,0)

        Result of the operation 
        """
        return _pyupm_i2clcd.Lcm1602_home(self)

    def createChar(self, *args):
        """
        createChar(Lcm1602 self, uint8_t charSlot, uint8_t [] charData) -> mraa::Result

        Parameters:
            charSlot: uint8_t
            charData: uint8_t []


        mraa::Result
        createChar(uint8_t charSlot, uint8_t charData[])

        Create a custom character

        Parameters:
        -----------

        charSlot:  the character slot to write, only 8 are available

        charData:  The character data (8 bytes) making up the character

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_createChar(self, *args)

    def displayOn(self):
        """
        displayOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        displayOn()

        Turn the display on

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_displayOn(self)

    def displayOff(self):
        """
        displayOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        displayOff()

        Turn the display off

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_displayOff(self)

    def cursorOn(self):
        """
        cursorOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        cursorOn()

        Turn the cursor on

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_cursorOn(self)

    def cursorOff(self):
        """
        cursorOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        cursorOff()

        Turn the cursor off

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_cursorOff(self)

    def cursorBlinkOn(self):
        """
        cursorBlinkOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        cursorBlinkOn()

        Turn cursor blink on

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_cursorBlinkOn(self)

    def cursorBlinkOff(self):
        """
        cursorBlinkOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        cursorBlinkOff()

        Turn cursor blink off

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_cursorBlinkOff(self)

    def scrollDisplayLeft(self):
        """
        scrollDisplayLeft(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        scrollDisplayLeft()

        Scroll the display left, without changing the character RAM

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_scrollDisplayLeft(self)

    def scrollDisplayRight(self):
        """
        scrollDisplayRight(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        scrollDisplayRight()

        Scroll the display right, without changing the character RAM

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_scrollDisplayRight(self)

    def entryLeftToRight(self):
        """
        entryLeftToRight(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        entryLeftToRight()

        set the entry mode so that characters are added left to right

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_entryLeftToRight(self)

    def entryRightToLeft(self):
        """
        entryRightToLeft(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        entryRightToLeft()

        set the entry mode so that characters are added right to left

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_entryRightToLeft(self)

    def autoscrollOn(self):
        """
        autoscrollOn(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        autoscrollOn()

        Right justify text entered from the cursor

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_autoscrollOn(self)

    def autoscrollOff(self):
        """
        autoscrollOff(Lcm1602 self) -> mraa::Result

        Parameters:
            self: upm::Lcm1602 *


        mraa::Result
        autoscrollOff()

        Left justify text entered from the cursor

        Result of operation 
        """
        return _pyupm_i2clcd.Lcm1602_autoscrollOff(self)

Lcm1602_swigregister = _pyupm_i2clcd.Lcm1602_swigregister
Lcm1602_swigregister(Lcm1602)

class Jhd1313m1(Lcm1602):
    """
    API for the JHD1313M1 I2C controller for HD44780-based displays with
    an RGB backlight, such as a Grove RGB I2C LCD display.

    ID: jhd1313m1

    Name: JHD1313M1 Display

    Other Names: Grove RGB LCD

    Category: display

    Manufacturer: seeed adafruit sparkfun

    Link:http://www.seeedstudio.com/depot/Grove-LCD-RGB-
    Backlight-p-1643.html?cPath=34_36

    Connection: i2c

    Kit: gsk  JHD1313M1 has two I2C addreses: one belongs to a controller,
    very similar to the upm::Lcm1602 LCD driver, that controls the
    HD44780-based display, and the other controls only the backlight. This
    module was tested with the Seeed Grove LCD RGB Backlight v2.0 display
    that requires 5V to operate.

    C++ includes: jhd1313m1.h 
    """
    __swig_setmethods__ = {}
    for _s in [Lcm1602]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jhd1313m1, name, value)
    __swig_getmethods__ = {}
    for _s in [Lcm1602]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Jhd1313m1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E, int rgbAddress=0x62) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int
            rgbAddress: int

        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int

        __init__(upm::Jhd1313m1 self, int bus) -> Jhd1313m1

        Parameters:
            bus: int


        Jhd1313m1(int bus,
        int lcdAddress=0x3E, int rgbAddress=0x62)

        Jhd1313m1 constructor

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Slave address the LCD is registered on

        address:  Slave address the RGB backlight is registered on 
        """
        this = _pyupm_i2clcd.new_Jhd1313m1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Jhd1313m1
    __del__ = lambda self : None;
    def scroll(self, *args):
        """
        scroll(Jhd1313m1 self, bool direction) -> mraa::Result

        Parameters:
            direction: bool


        mraa::Result
        scroll(bool direction)

        Makes the LCD scroll text

        Parameters:
        -----------

        direction:  True if scrolling to the right

        Result of the operation 
        """
        return _pyupm_i2clcd.Jhd1313m1_scroll(self, *args)

    def setColor(self, *args):
        """
        setColor(Jhd1313m1 self, uint8_t r, uint8_t g, uint8_t b) -> mraa::Result

        Parameters:
            r: uint8_t
            g: uint8_t
            b: uint8_t


        mraa::Result
        setColor(uint8_t r, uint8_t g, uint8_t b)

        Sets the color of the backlight

        Parameters:
        -----------

        r:  0-255 value for red

        g:  0-255 value for green

        b:  0-255 value for blue

        Result of the operation 
        """
        return _pyupm_i2clcd.Jhd1313m1_setColor(self, *args)

Jhd1313m1_swigregister = _pyupm_i2clcd.Jhd1313m1_swigregister
Jhd1313m1_swigregister(Jhd1313m1)

class SSD1327(LCD):
    """
    API for SSD1327 I2C-controlled OLED displays.

    ID: ssd1327

    Name: SSD1327 OLED Display

    Other Names: Grove OLED Display 1.12"

    Category: display

    Manufacturer: seeed adafruit

    Link:http://garden.seeedstudio.com/images/8/82/SSD1327_datasheet.pdf

    Link:http://www.seeedstudio.com/wiki/Grove_-_OLED_Display_1.12%22

    Connection: i2c  SSD1327 is a 96x96 dot-matrix OLED/PLED segment
    driver with a controller. This implementation was tested using the
    Grove LED 96x96 Display modulke, which is an OLED monochrome display

    C++ includes: ssd1327.h 
    """
    __swig_setmethods__ = {}
    for _s in [LCD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1327, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1327, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::SSD1327 self, int bus, int address=0x3C) -> SSD1327

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1327 self, int bus) -> SSD1327

        Parameters:
            bus: int


        SSD1327(int bus, int
        address=0x3C)

        SSD1327 constructor; calls libmraa initialisation functions

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Slave address the LCD is registered on 
        """
        this = _pyupm_i2clcd.new_SSD1327(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1327
    __del__ = lambda self : None;
    def draw(self, *args):
        """
        draw(SSD1327 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int


        mraa::Result draw(uint8_t
        *data, int bytes)

        Draws an image; see examples/python/make_oled_pic.py for an
        explanation of how pixels are mapped to bytes

        Parameters:
        -----------

        data:  Buffer to read

        bytes:  Number of bytes to read from the pointer

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_draw(self, *args)

    def setGrayLevel(self, *args):
        """
        setGrayLevel(SSD1327 self, uint8_t level)

        Parameters:
            level: uint8_t


        void
        setGrayLevel(uint8_t level)

        Sets the gray level for the LCD panel

        Parameters:
        -----------

        gray:  level from 0 to 255

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_setGrayLevel(self, *args)

    def write(self, *args):
        """
        write(SSD1327 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        mraa::Result
        write(std::string msg)

        Writes a string to the LCD

        Parameters:
        -----------

        msg:  std::string to write to the display; note: only ASCII characters
        are supported

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(SSD1327 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        mraa::Result
        setCursor(int row, int column)

        Sets the cursor to specified coordinates

        Parameters:
        -----------

        row:  Row to set the cursor to

        column:  Column to set the cursor to

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_setCursor(self, *args)

    def clear(self):
        """
        clear(SSD1327 self) -> mraa::Result

        Parameters:
            self: upm::SSD1327 *


        mraa::Result clear()

        Clears the display of all characters

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_clear(self)

    def home(self):
        """
        home(SSD1327 self) -> mraa::Result

        Parameters:
            self: upm::SSD1327 *


        mraa::Result home()

        Returns to the original coordinates (0,0)

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1327_home(self)

SSD1327_swigregister = _pyupm_i2clcd.SSD1327_swigregister
SSD1327_swigregister(SSD1327)
DISPLAY_CMD_SET_NORMAL = cvar.DISPLAY_CMD_SET_NORMAL

class SSD1308(LCD):
    """
    API for SSD1308 I2C-controlled OLED displays.

    ID: ssd1308

    Name: SSD1308 OLED Display

    Other Names: Grove OLED Display 0.96"

    Category: display

    Manufacturer: seeed adafruit

    Link:http://garden.seeedstudio.com/images/4/46/SSD1308_1.0.pdf

    Link:http://www.seeedstudio.com/wiki/Grove_-_OLED_Display_0.96%22

    Connection: i2c  SSD1308 is a 128x64 dot-matrix OLED/PLED segment
    driver with a controller. This implementation was tested using the
    Grove LED 128x64 Display module, which is an OLED monochrome display

    C++ includes: ssd1308.h 
    """
    __swig_setmethods__ = {}
    for _s in [LCD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1308, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1308, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::SSD1308 self, int bus, int address=0x3C) -> SSD1308

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1308 self, int bus) -> SSD1308

        Parameters:
            bus: int


        SSD1308(int bus, int
        address=0x3C)

        SSD1308 constructor; calls libmraa initialisation functions

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Slave address the LCD is registered on 
        """
        this = _pyupm_i2clcd.new_SSD1308(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1308
    __del__ = lambda self : None;
    def draw(self, *args):
        """
        draw(SSD1308 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int


        mraa::Result draw(uint8_t
        *data, int bytes)

        Draws an image; see examples/python/make_oled_pic.py for an
        explanation of how pixels are mapped to bytes

        Parameters:
        -----------

        data:  Buffer to read

        bytes:  Number of bytes to read from the pointer

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1308_draw(self, *args)

    def write(self, *args):
        """
        write(SSD1308 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        mraa::Result
        write(std::string msg)

        Writes a string to the LCD

        Parameters:
        -----------

        msg:  std::string to write to the display; note: only ASCII characters
        are supported

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1308_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(SSD1308 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        mraa::Result
        setCursor(int row, int column)

        Sets the cursor to specified coordinates

        Parameters:
        -----------

        row:  Row to set the cursor to

        column:  Column to set the cursor to

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1308_setCursor(self, *args)

    def clear(self):
        """
        clear(SSD1308 self) -> mraa::Result

        Parameters:
            self: upm::SSD1308 *


        mraa::Result clear()

        Clears the display of all characters

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1308_clear(self)

    def home(self):
        """
        home(SSD1308 self) -> mraa::Result

        Parameters:
            self: upm::SSD1308 *


        mraa::Result home()

        Returns to the original coordinates (0,0)

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1308_home(self)

SSD1308_swigregister = _pyupm_i2clcd.SSD1308_swigregister
SSD1308_swigregister(SSD1308)
DISPLAY_CMD_SET_NORMAL_1308 = cvar.DISPLAY_CMD_SET_NORMAL_1308

EBOLED_DEFAULT_SPI_BUS = _pyupm_i2clcd.EBOLED_DEFAULT_SPI_BUS
EBOLED_DEFAULT_CD = _pyupm_i2clcd.EBOLED_DEFAULT_CD
EBOLED_DEFAULT_RESET = _pyupm_i2clcd.EBOLED_DEFAULT_RESET
class EBOLED(LCD):
    """
    API for EBOLED spi controlled OLED display.

    ID: eboled

    Name: Sparkfun Edison Block OLED Display

    Other Names: ssd1306

    Category: display

    Manufacturer: sparkfun

    Link:https://www.sparkfun.com/products/13035

    Connection: spi  The EBOLED is an ssd1306 with some modifications to
    work as an Edison Block. It is a 64x48 pixel OLED display that
    connects directly to an edison via it's 80-pin connector. Edison
    Blocks are stackable modules created by Sparkfun.

    This block has some buttons on it that can be accessed using standard
    GPIO this driver only concerns itself with the display.

    OLED Sensor image provided by SparkFun* underCC BY-NC-SA-3.0.

    C++ includes: eboled.h 
    """
    __swig_setmethods__ = {}
    for _s in [LCD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EBOLED, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EBOLED, name)
    __repr__ = _swig_repr
    def __init__(self, spi=0, CD=36, reset=48): 
        """
        __init__(upm::EBOLED self, int spi=0, int CD=36, int reset=48) -> EBOLED

        Parameters:
            spi: int
            CD: int
            reset: int

        __init__(upm::EBOLED self, int spi=0, int CD=36) -> EBOLED

        Parameters:
            spi: int
            CD: int

        __init__(upm::EBOLED self, int spi=0) -> EBOLED

        Parameters:
            spi: int

        __init__(upm::EBOLED self) -> EBOLED

        EBOLED(int
        spi=EBOLED_DEFAULT_SPI_BUS, int CD=EBOLED_DEFAULT_CD, int
        reset=EBOLED_DEFAULT_RESET)

        EBOLED Constructor. Note that you will not have any choice as to the
        pins used, so they are all set to default values.

        Parameters:
        -----------

        spi:  spi bus to use

        CD:  Command/Data select pin

        reset:  reset pin

        address:  the slave address the lcd is registered on 
        """
        this = _pyupm_i2clcd.new_EBOLED(spi, CD, reset)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_EBOLED
    __del__ = lambda self : None;
    def refresh(self):
        """
        refresh(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *


        mraa::Result refresh()

        Draw the buffer to screen.

        result of operation 
        """
        return _pyupm_i2clcd.EBOLED_refresh(self)

    def write(self, *args):
        """
        write(EBOLED self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        mraa::Result
        write(std::string msg)

        Write a string to LCD

        Parameters:
        -----------

        msg:  the std::string to write to display, note only ascii chars are
        supported

        result of operation 
        """
        return _pyupm_i2clcd.EBOLED_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(EBOLED self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        mraa::Result
        setCursor(int row, int column)

        Set cursor to a coordinate

        Parameters:
        -----------

        y:  Axis on the vertical scale. This device supports 6 rows.

        x:  Axis on the horizontal scale This device supports 64 columns

        result of operation 
        """
        return _pyupm_i2clcd.EBOLED_setCursor(self, *args)

    def setTextColor(self, *args):
        """
        setTextColor(EBOLED self, uint8_t textColor)

        Parameters:
            textColor: uint8_t


        void
        setTextColor(uint8_t textColor)

        Sets a text color for a message

        Parameters:
        -----------

        textColor:  Font color: COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_setTextColor(self, *args)

    def setTextSize(self, *args):
        """
        setTextSize(EBOLED self, uint8_t size)

        Parameters:
            size: uint8_t


        void
        setTextSize(uint8_t size)

        Sets the size of the font

        Parameters:
        -----------

        size:  Font size 
        """
        return _pyupm_i2clcd.EBOLED_setTextSize(self, *args)

    def setTextWrap(self, *args):
        """
        setTextWrap(EBOLED self, uint8_t wrap)

        Parameters:
            wrap: uint8_t


        void
        setTextWrap(uint8_t wrap)

        Wraps a printed message

        Parameters:
        -----------

        wrap:  True (1) or false (0) 
        """
        return _pyupm_i2clcd.EBOLED_setTextWrap(self, *args)

    def drawChar(self, *args):
        """
        drawChar(EBOLED self, uint8_t x, uint8_t y, uint8_t data, uint8_t color, uint8_t size)

        Parameters:
            x: uint8_t
            y: uint8_t
            data: uint8_t
            color: uint8_t
            size: uint8_t


        void drawChar(uint8_t
        x, uint8_t y, uint8_t data, uint8_t color, uint8_t size)

        Write a single character to the screen.

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        data:  Character to write

        color:  Character color

        bg:  Character background color

        size:  Size of the font 
        """
        return _pyupm_i2clcd.EBOLED_drawChar(self, *args)

    def clear(self):
        """
        clear(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *


        mraa::Result clear()

        Clear display

        result of operation 
        """
        return _pyupm_i2clcd.EBOLED_clear(self)

    def clearScreenBuffer(self):
        """
        clearScreenBuffer(EBOLED self)

        Parameters:
            self: upm::EBOLED *


        void
        clearScreenBuffer() 
        """
        return _pyupm_i2clcd.EBOLED_clearScreenBuffer(self)

    def home(self):
        """
        home(EBOLED self) -> mraa::Result

        Parameters:
            self: upm::EBOLED *


        mraa::Result home()

        Return to coordinate 0,0

        result of operation 
        """
        return _pyupm_i2clcd.EBOLED_home(self)

    def drawPixel(self, *args):
        """
        drawPixel(EBOLED self, int8_t x, int8_t y, uint8_t color=COLOR_WHITE)

        Parameters:
            x: int8_t
            y: int8_t
            color: uint8_t

        drawPixel(EBOLED self, int8_t x, int8_t y)

        Parameters:
            x: int8_t
            y: int8_t


        void drawPixel(int8_t
        x, int8_t y, uint8_t color=COLOR_WHITE)

        Write a single pixel to the screen buffer. Can do an specific color
        write or toggle (xor) a pixel.

        Parameters:
        -----------

        x:  the x position of the pixel

        y:  the y position of the pixel

        color:  pixel is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawPixel(self, *args)

    def drawLine(self, *args):
        """
        drawLine(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, uint8_t color=COLOR_WHITE)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            color: uint8_t

        drawLine(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t


        void drawLine(int8_t
        x0, int8_t y0, int8_t x1, int8_t y1, uint8_t color=COLOR_WHITE)

        Draw a line to the screen buffer.

        Parameters:
        -----------

        x0:  the x position of the beginning of the line

        y0:  the y position of the beginning of the line

        x1:  the x position of the end of the line

        y1:  the y position of the end of the line

        color:  line is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawLine(self, *args)

    def drawLineHorizontal(self, *args):
        """
        drawLineHorizontal(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t color=COLOR_WHITE)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            color: uint8_t

        drawLineHorizontal(EBOLED self, int8_t x, int8_t y, uint8_t width)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t


        void
        drawLineHorizontal(int8_t x, int8_t y, uint8_t width, uint8_t
        color=COLOR_WHITE)

        Draw a horizontal line to the screen buffer.

        Parameters:
        -----------

        x:  the x position of the beginning of the line

        y:  the y position of the beginning of the line

        width:  is the horizontal length of the line

        color:  line is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawLineHorizontal(self, *args)

    def drawLineVertical(self, *args):
        """
        drawLineVertical(EBOLED self, int8_t x, int8_t y, uint8_t height, uint8_t color=COLOR_WHITE)

        Parameters:
            x: int8_t
            y: int8_t
            height: uint8_t
            color: uint8_t

        drawLineVertical(EBOLED self, int8_t x, int8_t y, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            height: uint8_t


        void
        drawLineVertical(int8_t x, int8_t y, uint8_t height, uint8_t
        color=COLOR_WHITE)

        Draw a vertical line to the screen buffer.

        Parameters:
        -----------

        x:  the x position of the beginning of the line

        y:  the y position of the beginning of the line

        width:  is the vertical length of the line

        color:  line is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawLineVertical(self, *args)

    def drawRectangle(self, *args):
        """
        drawRectangle(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height, uint8_t color=COLOR_WHITE)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t
            color: uint8_t

        drawRectangle(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t


        void
        drawRectangle(int8_t x, int8_t y, uint8_t width, uint8_t height,
        uint8_t color=COLOR_WHITE)

        Draw a rectangle to the screen buffer.

        Parameters:
        -----------

        x:  the left edge

        y:  the top edge

        width:  sets the right edge

        height:  bottom edge

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawRectangle(self, *args)

    def drawRoundedRectangle(self, *args):
        """
        drawRoundedRectangle(EBOLED self, int8_t x, int8_t y, int8_t width, int8_t height, int16_t radius, uint8_t color)

        Parameters:
            x: int8_t
            y: int8_t
            width: int8_t
            height: int8_t
            radius: int16_t
            color: uint8_t


        void
        drawRoundedRectangle(int8_t x, int8_t y, int8_t width, int8_t height,
        int16_t radius, uint8_t color)

        Draw a rectangle with rounded corners to the screen buffer.

        Parameters:
        -----------

        x:  the left edge

        y:  the top edge

        width:  sets the right edge

        height:  bottom edge

        radius:  of the rounded corners

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawRoundedRectangle(self, *args)

    def drawRectangleFilled(self, *args):
        """
        drawRectangleFilled(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height, uint8_t color=COLOR_WHITE)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t
            color: uint8_t

        drawRectangleFilled(EBOLED self, int8_t x, int8_t y, uint8_t width, uint8_t height)

        Parameters:
            x: int8_t
            y: int8_t
            width: uint8_t
            height: uint8_t


        void
        drawRectangleFilled(int8_t x, int8_t y, uint8_t width, uint8_t height,
        uint8_t color=COLOR_WHITE)

        Draw a filled rectangle to the screen buffer.

        Parameters:
        -----------

        x:  the left edge

        y:  the top edge

        width:  sets the right edge

        height:  bottom edge

        color:  fill color is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawRectangleFilled(self, *args)

    def drawTriangle(self, *args):
        """
        drawTriangle(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2, uint8_t color=COLOR_WHITE)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t
            color: uint8_t

        drawTriangle(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t


        void
        drawTriangle(int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2,
        int8_t y2, uint8_t color=COLOR_WHITE)

        Draw a triangle to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the first corner

        y0:  the y coordinate of the first corner

        x1:  the x coordinate of the second corner

        y1:  the y coordinate of the second corner

        x2:  the x coordinate of the third corner

        y2:  the y coordinate of the third corner

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawTriangle(self, *args)

    def drawTriangleFilled(self, *args):
        """
        drawTriangleFilled(EBOLED self, int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            x1: int8_t
            y1: int8_t
            x2: int8_t
            y2: int8_t
            color: uint8_t


        void
        drawTriangleFilled(int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t
        x2, int8_t y2, uint8_t color)

        Draw a filled triangle to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the first corner

        y0:  the y coordinate of the first corner

        x1:  the x coordinate of the second corner

        y1:  the y coordinate of the second corner

        x2:  the x coordinate of the third corner

        y2:  the y coordinate of the third corner

        color:  fill color is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawTriangleFilled(self, *args)

    def drawCircle(self, *args):
        """
        drawCircle(EBOLED self, int16_t x0, int16_t y0, int16_t radius, uint8_t color=COLOR_WHITE)

        Parameters:
            x0: int16_t
            y0: int16_t
            radius: int16_t
            color: uint8_t

        drawCircle(EBOLED self, int16_t x0, int16_t y0, int16_t radius)

        Parameters:
            x0: int16_t
            y0: int16_t
            radius: int16_t


        void
        drawCircle(int16_t x0, int16_t y0, int16_t radius, uint8_t
        color=COLOR_WHITE)

        Draw a circle to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the circle's center

        y0:  the y coordinate of the circle's center

        radius:  the radius of the circle

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawCircle(self, *args)

    def drawRoundCorners(self, *args):
        """
        drawRoundCorners(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t cornername, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            cornername: uint8_t
            color: uint8_t


        void
        drawRoundCorners(int8_t x0, int8_t y0, int16_t radius, uint8_t
        cornername, uint8_t color)

        Draw a quarter circle arc to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the arc's center

        y0:  the y coordinate of the arc's center

        radius:  the radius of the arc

        cornername:  denotes which of the 4 quarters to draw - 1,2,4,8

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawRoundCorners(self, *args)

    def drawCircleFilled(self, *args):
        """
        drawCircleFilled(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            color: uint8_t


        void
        drawCircleFilled(int8_t x0, int8_t y0, int16_t radius, uint8_t color)

        Draw a filled circle to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the circle's center

        y0:  the y coordinate of the circle's center

        radius:  the radius of the circle

        color:  outline is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawCircleFilled(self, *args)

    def drawRoundedCornersFilled(self, *args):
        """
        drawRoundedCornersFilled(EBOLED self, int8_t x0, int8_t y0, int16_t radius, uint8_t cornername, int16_t delta, uint8_t color)

        Parameters:
            x0: int8_t
            y0: int8_t
            radius: int16_t
            cornername: uint8_t
            delta: int16_t
            color: uint8_t


        void
        drawRoundedCornersFilled(int8_t x0, int8_t y0, int16_t radius, uint8_t
        cornername, int16_t delta, uint8_t color)

        Draw a quarter pie to the screen buffer.

        Parameters:
        -----------

        x0:  the x coordinate of the arc's center

        y0:  the y coordinate of the arc's center

        radius:  the radius of the arc

        cornername:  denotes which of the 4 quarters to draw - 1,2,4,8

        color:  fill color is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_drawRoundedCornersFilled(self, *args)

    def fillScreen(self, *args):
        """
        fillScreen(EBOLED self, uint8_t color=COLOR_WHITE)

        Parameters:
            color: uint8_t

        fillScreen(EBOLED self)

        Parameters:
            self: upm::EBOLED *


        void
        fillScreen(uint8_t color=COLOR_WHITE)

        Fill the screen buffer with specified color.

        Parameters:
        -----------

        color:  fill color is COLOR_WHITE, COLOR_BLACK or COLOR_XOR 
        """
        return _pyupm_i2clcd.EBOLED_fillScreen(self, *args)

EBOLED_swigregister = _pyupm_i2clcd.EBOLED_swigregister
EBOLED_swigregister(EBOLED)
COLOR_WHITE = cvar.COLOR_WHITE
COLOR_BLACK = cvar.COLOR_BLACK
COLOR_XOR = cvar.COLOR_XOR
OLED_WIDTH = cvar.OLED_WIDTH
VERT_COLUMNS = cvar.VERT_COLUMNS
OLED_HEIGHT = cvar.OLED_HEIGHT
BUFFER_SIZE = cvar.BUFFER_SIZE

class SAINSMARTKS(Lcm1602):
    """
    API for Sainsmart LCD Keypad Shield.

    ID: sainsmartks

    Name: SainSmart LCD Keypad Shield

    Category: display

    Manufacturer: sainsmart dfrobot sparkfun

    Link:http://www.sainsmart.com/sainsmart-1602-lcd-keypad-shield-for-
    arduino- duemilanove-uno-mega2560-mega1280.html

    Link:http://www.dfrobot.com/index.php?route=product/product&product_id=51

    Link:https://www.sparkfun.com/products/13293

    Connection: gpio analog  The Sainsmart LCD Keypad Shield uses 6
    digital outputs and 1 analog input (for the keypad). The outputs are
    used to drive an attached LCM1602 LCD controller. This driver should
    also be compatible with the similar LCD keypad shields from DFRobot
    and Sparkfun.

    C++ includes: sainsmartks.h 
    """
    __swig_setmethods__ = {}
    for _s in [Lcm1602]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAINSMARTKS, name, value)
    __swig_getmethods__ = {}
    for _s in [Lcm1602]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SAINSMARTKS, name)
    __repr__ = _swig_repr
    def __init__(self, rs=8, enable=9, d0=4, d1=5, d2=6, d3=7, keypad=0): 
        """
        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6, uint8_t d3=7, 
            uint8_t keypad=0) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t
            keypad: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6, uint8_t d3=7) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t
            d3: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5, uint8_t d2=6) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t
            d2: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t d1=5) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t
            d1: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9, uint8_t d0=4) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t
            d0: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8, uint8_t enable=9) -> SAINSMARTKS

        Parameters:
            rs: uint8_t
            enable: uint8_t

        __init__(upm::SAINSMARTKS self, uint8_t rs=8) -> SAINSMARTKS

        Parameters:
            rs: uint8_t

        __init__(upm::SAINSMARTKS self) -> SAINSMARTKS

        SAINSMARTKS(uint8_t rs=8, uint8_t enable=9, uint8_t d0=4, uint8_t
        d1=5, uint8_t d2=6, uint8_t d3=7, uint8_t keypad=0)

        SAINSMARTKS constructor

        As this is a shield, you will not likely have any choice over the pins
        that are used. For this reason, we provide defaults for all of them of
        course they can be changed if your device is different.

        Parameters:
        -----------

        rs:  register select pin

        enable:  enable pin

        d0:  data 0 pin

        d1:  data 1 pin

        d2:  data 2 pin

        d3:  data 3 pin

        keypad:  analog pin of the keypad 
        """
        this = _pyupm_i2clcd.new_SAINSMARTKS(rs, enable, d0, d1, d2, d3, keypad)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SAINSMARTKS
    __del__ = lambda self : None;
    def getRawKeyValue(self):
        """
        getRawKeyValue(SAINSMARTKS self) -> float

        Parameters:
            self: upm::SAINSMARTKS *


        float
        getRawKeyValue()

        returns the floating point representation of the key that is being
        pushed. Each key produces a different value between 0.0 and 1.0, and
        only one key can be read at a time.

        the floating point value representing a key 
        """
        return _pyupm_i2clcd.SAINSMARTKS_getRawKeyValue(self)

SAINSMARTKS_swigregister = _pyupm_i2clcd.SAINSMARTKS_swigregister
SAINSMARTKS_swigregister(SAINSMARTKS)

class SSD1306(LCD):
    """
    API for SSD1306 I2C-controlled OLED displays.

    ID: ssd1306

    Name: SSD1306 OLED Display

    Other Names: Adafruit SSD1306 OLED Display 0.96"

    Category: display

    Manufacturer: adafruit

    Link:https://www.adafruit.com/datasheets/SSD1306.pdf

    Link:http://www.farnell.com/datasheets/609753.pdf

    Connection: i2c  SSD1306 is a 128x64 dot-matrix OLED/PLED segment
    driver with a controller. This device is available from many suppliers
    for a very low cost. This implementation was tested using a generic
    SSD1306 device from eBay.

    C++ includes: ssd1306.h 
    """
    __swig_setmethods__ = {}
    for _s in [LCD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1306, name, value)
    __swig_getmethods__ = {}
    for _s in [LCD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1306, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::SSD1306 self, int bus, int address=0x3C) -> SSD1306

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1306 self, int bus) -> SSD1306

        Parameters:
            bus: int


        SSD1306(int bus, int
        address=0x3C)

        SSD1306 constructor; calls libmraa initialisation functions

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Slave address the LCD is registered on 
        """
        this = _pyupm_i2clcd.new_SSD1306(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1306
    __del__ = lambda self : None;
    def draw(self, *args):
        """
        draw(SSD1306 self, uint8_t * data, int bytes) -> mraa::Result

        Parameters:
            data: uint8_t *
            bytes: int


        mraa::Result draw(uint8_t
        *data, int bytes)

        Draws an image; see examples/python/make_oled_pic.py for an
        explanation of how pixels are mapped to bytes

        Parameters:
        -----------

        data:  Buffer to read

        bytes:  Number of bytes to read from the pointer

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_draw(self, *args)

    def write(self, *args):
        """
        write(SSD1306 self, std::string msg) -> mraa::Result

        Parameters:
            msg: std::string


        mraa::Result
        write(std::string msg)

        Writes a string to the LCD

        Parameters:
        -----------

        msg:  std::string to write to the display; note: only ASCII characters
        are supported

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_write(self, *args)

    def setCursor(self, *args):
        """
        setCursor(SSD1306 self, int row, int column) -> mraa::Result

        Parameters:
            row: int
            column: int


        mraa::Result
        setCursor(int row, int column)

        Sets the cursor to specified coordinates

        Parameters:
        -----------

        row:  Row to set the cursor to

        column:  Column to set the cursor to

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_setCursor(self, *args)

    def clear(self):
        """
        clear(SSD1306 self) -> mraa::Result

        Parameters:
            self: upm::SSD1306 *


        mraa::Result clear()

        Clears the display of all characters

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_clear(self)

    def home(self):
        """
        home(SSD1306 self) -> mraa::Result

        Parameters:
            self: upm::SSD1306 *


        mraa::Result home()

        Returns to the original coordinates (0,0)

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_home(self)

    def invert(self, *args):
        """
        invert(SSD1306 self, bool i) -> mraa::Result

        Parameters:
            i: bool


        mraa::Result invert(bool
        i)

        Inverts the display

        Parameters:
        -----------

        i:  true to invert, false for normal display

        Result of the operation 
        """
        return _pyupm_i2clcd.SSD1306_invert(self, *args)

    def startscrollright(self, *args):
        """
        startscrollright(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t


        void
        startscrollright(uint8_t start, uint8_t stop)

        Activate a scroll to the right for rows start through stop The display
        is 16 rows tall. To scroll the whole display, run:
        display.scrollright(0x00, 0x0F)

        Parameters:
        -----------

        start:  First row to scroll

        stop:  Last row to scroll

        void 
        """
        return _pyupm_i2clcd.SSD1306_startscrollright(self, *args)

    def startscrollleft(self, *args):
        """
        startscrollleft(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t


        void
        startscrollleft(uint8_t start, uint8_t stop)

        Activate a scroll to the left for rows start through stop The display
        is 16 rows tall. To scroll the whole display, run:
        display.startscrollright(0x00, 0x0F)

        Parameters:
        -----------

        start:  First row to scroll

        stop:  Last row to scroll

        void 
        """
        return _pyupm_i2clcd.SSD1306_startscrollleft(self, *args)

    def startscrolldiagright(self, *args):
        """
        startscrolldiagright(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t


        void
        startscrolldiagright(uint8_t start, uint8_t stop)

        Activate a scroll to the upper right for rows start through stop The
        display is 16 rows tall. To scroll the whole display, run:
        display.startscrollleft(0x00, 0x0F)

        Parameters:
        -----------

        start:  First row to scroll

        stop:  Last row to scroll

        void 
        """
        return _pyupm_i2clcd.SSD1306_startscrolldiagright(self, *args)

    def startscrolldiagleft(self, *args):
        """
        startscrolldiagleft(SSD1306 self, uint8_t start, uint8_t stop)

        Parameters:
            start: uint8_t
            stop: uint8_t


        void
        startscrolldiagleft(uint8_t start, uint8_t stop)

        Activate a scroll to the upper left for rows start through stop The
        display is 16 rows tall. To scroll the whole display, run:
        display.startscrolldiaagright(0x00, 0x0F)

        Parameters:
        -----------

        start:  First row to scroll

        stop:  Last row to scroll

        void 
        """
        return _pyupm_i2clcd.SSD1306_startscrolldiagleft(self, *args)

    def stopscroll(self):
        """
        stopscroll(SSD1306 self)

        Parameters:
            self: upm::SSD1306 *


        void
        stopscroll(void)

        Stops display scrolling.

        void 
        """
        return _pyupm_i2clcd.SSD1306_stopscroll(self)

    def dim(self, *args):
        """
        dim(SSD1306 self, bool dim)

        Parameters:
            dim: bool


        void dim(bool dim)

        Dims display

        Parameters:
        -----------

        dim:  True to dim display, false for max intensity

        Result of last operation 
        """
        return _pyupm_i2clcd.SSD1306_dim(self, *args)

SSD1306_swigregister = _pyupm_i2clcd.SSD1306_swigregister
SSD1306_swigregister(SSD1306)
DISPLAY_CMD_SET_NORMAL_1306 = cvar.DISPLAY_CMD_SET_NORMAL_1306
SSD1306_SETCONTRAST = cvar.SSD1306_SETCONTRAST
SSD1306_DISPLAYALLON_RESUME = cvar.SSD1306_DISPLAYALLON_RESUME
SSD1306_DISPLAYALLON = cvar.SSD1306_DISPLAYALLON
DISPLAY_CMD_SET_INVERT_1306 = cvar.DISPLAY_CMD_SET_INVERT_1306
SSD1306_SETDISPLAYOFFSET = cvar.SSD1306_SETDISPLAYOFFSET
SSD1306_SETCOMPINS = cvar.SSD1306_SETCOMPINS
SSD1306_SETVCOMDETECT = cvar.SSD1306_SETVCOMDETECT
SSD1306_SETDISPLAYCLOCKDIV = cvar.SSD1306_SETDISPLAYCLOCKDIV
SSD1306_SETPRECHARGE = cvar.SSD1306_SETPRECHARGE
SSD1306_SETMULTIPLEX = cvar.SSD1306_SETMULTIPLEX
SSD1306_SETLOWCOLUM = cvar.SSD1306_SETLOWCOLUM
SSD1306_SETHIGHCOLUMN = cvar.SSD1306_SETHIGHCOLUMN
SSD1306_SETSTARTLINE = cvar.SSD1306_SETSTARTLINE
SSD1306_MEMORYMODE = cvar.SSD1306_MEMORYMODE
SSD1306_COLUMNADDR = cvar.SSD1306_COLUMNADDR
SSD1306_PAGEADDR = cvar.SSD1306_PAGEADDR
SSD1306_COMSCANINC = cvar.SSD1306_COMSCANINC
SSD1306_COMSCANDEC = cvar.SSD1306_COMSCANDEC
SSD1306_SEGREMAP = cvar.SSD1306_SEGREMAP
SSD1306_CHARGEPUMP = cvar.SSD1306_CHARGEPUMP
SSD1306_EXTERNALVCC = cvar.SSD1306_EXTERNALVCC
SSD1306_SWITCHCAPVCC = cvar.SSD1306_SWITCHCAPVCC
SSD1306_ACTIVATE_SCROLL = cvar.SSD1306_ACTIVATE_SCROLL
SSD1306_DEACTIVATE_SCROLL = cvar.SSD1306_DEACTIVATE_SCROLL
SSD1306_SET_VERTICAL_SCROLL_AREA = cvar.SSD1306_SET_VERTICAL_SCROLL_AREA
SSD1306_RIGHT_HORIZONTAL_SCROLL = cvar.SSD1306_RIGHT_HORIZONTAL_SCROLL
SSD1306_LEFT_HORIZONTAL_SCROLL = cvar.SSD1306_LEFT_HORIZONTAL_SCROLL
SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = cvar.SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL
SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = cvar.SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL
SSD1306_BLACK = cvar.SSD1306_BLACK
SSD1306_WHITE = cvar.SSD1306_WHITE
SSD1306_LCDWIDTH = cvar.SSD1306_LCDWIDTH
SSD1306_LCDHEIGHT = cvar.SSD1306_LCDHEIGHT

# This file is compatible with both classic and new-style classes.


